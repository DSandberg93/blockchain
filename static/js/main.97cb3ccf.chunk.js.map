{"version":3,"sources":["components/Block.js","components/Chain.js","containers/App.js","serviceWorker.js","index.js"],"names":["headerStyle","textAlign","fontSize","labelStyle","paddingTop","paddingBottom","width","contentStyle","marginTop","textIndent","rowStyle","marginRight","marginLeft","Block","react_default","a","createElement","className","style","paddingRight","xmlns","height","viewBox","fill","d","Chain","components_Block","navStyle","boxShadow","App","components_Chain","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAEMA,EAAc,CAClBC,UAAW,OACXC,SAAU,QAGNC,EAAa,CACjBC,WAAY,GACZC,cAAe,GACfC,MAAO,IACPJ,SAAU,IAGNK,EAAe,CACnBC,UAAW,GACXC,WAAY,GACZR,UAAW,QAGPS,EAAW,CACfF,UAAW,GACXG,YAAa,EACbC,WAAY,GAmCCC,EAhCA,WACb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAqBC,MAAO,CAAEV,UAAW,KACtDM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCAAkCC,MAAQlB,GAAzD,kBACAc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAAoBC,MAAO,CAAEC,aAAc,EAAGf,WAAY,KACxEU,EAAAC,EAAAC,cAAA,OAAKI,MAAM,6BAA6Bd,MAAM,KAAKe,OAAO,KAAKC,QAAQ,aAAYR,EAAAC,EAAAC,cAAA,QAAMO,KAAK,OAAOC,EAAE,oBAAmBV,EAAAC,EAAAC,cAAA,QAAMQ,EAAE,kRAEpIV,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,MAAQX,GAApC,eAEFO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,MAAQR,GAC3BI,EAAAC,EAAAC,cAAA,QAAMC,UAAU,sBAAsBC,MAAOf,GAA7C,iBACAW,EAAAC,EAAAC,cAAA,KAAGE,MAAQX,GAAX,cAEFO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,MAAQR,GAC3BI,EAAAC,EAAAC,cAAA,QAAMC,UAAU,sBAAsBC,MAAOf,GAA7C,QACAW,EAAAC,EAAAC,cAAA,KAAGE,MAAQX,GAAX,cAEFO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,MAAQR,GAC3BI,EAAAC,EAAAC,cAAA,QAAMC,UAAU,sBAAsBC,MAAOf,GAA7C,SACAW,EAAAC,EAAAC,cAAA,KAAGE,MAAQX,GAAX,eAEFO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,MAAQR,GAC3BI,EAAAC,EAAAC,cAAA,QAAMC,UAAU,sBAAsBC,MAAOf,GAA7C,QACAW,EAAAC,EAAAC,cAAA,KAAGE,MAAQX,GAAX,iBCxCKkB,EARD,WACZ,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYC,MAAO,CAAEZ,MAAO,MACzCQ,EAAAC,EAAAC,cAACU,EAAD,QCFAC,SAAW,CACfC,UAAW,mCAcEC,mLATX,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCAAsCC,MAAQS,GAAWb,EAAAC,EAAAC,cAAA,yBACxEF,EAAAC,EAAAC,cAACc,EAAD,cALUC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.97cb3ccf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst headerStyle = {\r\n  textAlign: 'left',\r\n  fontSize: '2rem'\r\n}\r\n\r\nconst labelStyle = {\r\n  paddingTop: 15,\r\n  paddingBottom: 15,\r\n  width: 180,\r\n  fontSize: 14\r\n};\r\n\r\nconst contentStyle = {\r\n  marginTop: 10,\r\n  textIndent: 10,\r\n  textAlign: 'left'\r\n};\r\n\r\nconst rowStyle = {\r\n  marginTop: 10,\r\n  marginRight: 0,\r\n  marginLeft: 0\r\n};\r\n\r\nconst Block  = () => {\r\n  return (\r\n    <div className=\"card card-nav-tabs\" style={{ marginTop: 50 }}>\r\n      <div className=\"card-header card-header-success\" style={ headerStyle }>Block Number 1</div>\r\n      <div className=\"card-body\">\r\n        <div className=\"input-group\">\r\n          <span className=\"input-group-addon\" style={{ paddingRight: 5, paddingTop: 15 }}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-3 12H7c-.55 0-1-.45-1-1s.45-1 1-1h10c.55 0 1 .45 1 1s-.45 1-1 1zm0-3H7c-.55 0-1-.45-1-1s.45-1 1-1h10c.55 0 1 .45 1 1s-.45 1-1 1zm0-3H7c-.55 0-1-.45-1-1s.45-1 1-1h10c.55 0 1 .45 1 1s-.45 1-1 1z\"/></svg>\r\n          </span>\r\n          <p className=\"form-control\" style={ contentStyle }>Enter data</p>\r\n        </div>\r\n        <div className=\"row\" style={ rowStyle }>\r\n          <span className=\"badge badge-success\" style={labelStyle}>Previous hash</span>\r\n          <p style={ contentStyle }>Some hash</p>\r\n        </div>\r\n        <div className=\"row\" style={ rowStyle }>\r\n          <span className=\"badge badge-success\" style={labelStyle}>Time</span>\r\n          <p style={ contentStyle }>Some time</p>\r\n        </div>\r\n        <div className=\"row\" style={ rowStyle }>\r\n          <span className=\"badge badge-success\" style={labelStyle}>Nonce</span>\r\n          <p style={ contentStyle }>Some nonce</p>\r\n        </div>\r\n        <div className=\"row\" style={ rowStyle }>\r\n          <span className=\"badge badge-success\" style={labelStyle}>Hash</span>\r\n          <p style={ contentStyle }>Some hash</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Block;\r\n","import React from 'react';\r\nimport Block from './Block';\r\n\r\nconst Chain = () => {\r\n  return (\r\n    <div className=\"container\" style={{ width: 800 }}>\r\n      <Block/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chain;\r\n","import React, { Component } from 'react';\r\nimport Chain from '../components/Chain';\r\nimport './App.css';\r\n\r\nconst navStyle = {\r\n  boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2)'\r\n};\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <nav className=\"nav justify-content-center bg-white\" style={ navStyle }><h1>Blockchain</h1></nav>\r\n        <Chain/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// import 'material-kit/assets/css/material-kit.css';\r\nimport './assets/css/material-kit.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}