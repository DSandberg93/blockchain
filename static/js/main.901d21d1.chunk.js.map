{"version":3,"sources":["components/block/DataInput.js","components/block/Block.js","components/chain/Chain.js","containers/App.js","serviceWorker.js","index.js"],"names":["DataInput","_ref","dataInputChange","react_default","a","createElement","type","placeholder","className","onChange","Block","previousHash","blockName","data","time","nonce","hash","mined","mine","style","marginTop","pading","marginBottom","paddingRight","paddingTop","xmlns","width","height","viewBox","fill","d","toISOString","slice","block_DataInput","float","onClick","Crypto","require","createBlock","index","Date","hashResult","timestamp","createHash","update","digest","genesisBlock","Chain","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onMine","event","newBlock","state","blockChain","length","newBlockChain","push","console","log","setState","onDataInputChange","target","value","_this2","map","block","i","components_block_Block","key","Component","navStyle","boxShadow","App","chain_Chain","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.901d21d1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Block.css'\r\n\r\nconst DataInput = ({dataInputChange}) => {\r\n  return (\r\n    <input type=\"text\" placeholder=\"Input data\" className=\"form-control content-style\" onChange={dataInputChange}/>\r\n  );\r\n};\r\n\r\nexport default DataInput;\r\n","import React from 'react';\r\nimport './Block.css';\r\nimport DataInput from './DataInput';\r\n\r\nconst Block = ({ previousHash, blockName, data, time, nonce, hash, mined, mine, dataInputChange }) => {\r\n  return (\r\n    <div className=\"card card-nav-tabs\" style={{ marginTop: 50, pading: \"auto 15\" }}>\r\n      <div className=\"card-header card-header-success header-style\">{ blockName }</div>\r\n      <div className=\"card-body\">\r\n        { mined ?\r\n          <div>\r\n            <div className=\"input-group\" style={{ marginBottom: 10 }}>\r\n              <span className=\"input-group-addon\" style={{ paddingRight: 5, paddingTop: 5 }}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-3 12H7c-.55 0-1-.45-1-1s.45-1 1-1h10c.55 0 1 .45 1 1s-.45 1-1 1zm0-3H7c-.55 0-1-.45-1-1s.45-1 1-1h10c.55 0 1 .45 1 1s-.45 1-1 1zm0-3H7c-.55 0-1-.45-1-1s.45-1 1-1h10c.55 0 1 .45 1 1s-.45 1-1 1z\"/></svg>\r\n              </span>\r\n              <p className=\"form-control content-style\">{data}</p>\r\n            </div>\r\n            <div className=\"row row-style\">\r\n              <span className=\"label-style\">Previous hash:</span>\r\n              <p className=\"content-style\">{previousHash}</p>\r\n            </div>\r\n            <div className=\"row row-style\">\r\n              <span className=\"label-style\">Time:</span>\r\n              <p className=\"content-style\">{time.toISOString().slice(0,10)} {time.toISOString().slice(11,19)}</p>\r\n            </div>\r\n            <div className=\"row row-style\">\r\n              <span className=\"label-style\">Nonce:</span>\r\n              <p className=\"content-style\">{nonce}</p>\r\n            </div>\r\n            <div className=\"row row-style\">\r\n              <span className=\"label-style\">Hash:</span>\r\n              <p className=\"content-style\">{hash}</p>\r\n            </div>\r\n          </div>\r\n        :\r\n          <div>\r\n            <div className=\"input-group\">\r\n              <span style={{ paddingRight: 5, paddingTop: 5 }}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-3 12H7c-.55 0-1-.45-1-1s.45-1 1-1h10c.55 0 1 .45 1 1s-.45 1-1 1zm0-3H7c-.55 0-1-.45-1-1s.45-1 1-1h10c.55 0 1 .45 1 1s-.45 1-1 1zm0-3H7c-.55 0-1-.45-1-1s.45-1 1-1h10c.55 0 1 .45 1 1s-.45 1-1 1z\"/></svg>\r\n              </span>\r\n              <DataInput dataInputChange={dataInputChange}/>\r\n            </div>\r\n            <button className=\"btn btn-warning\" style={{ float: \"right\" }} onClick={mine}>Mine data</button>\r\n          </div>\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Block;\r\n","import React, { Component, } from 'react';\r\nimport Block from '../block/Block';\r\nconst Crypto = require('crypto');\r\n\r\nconst createHash = (previousHash, data, timestamp, index) => {\r\n  let nonce = 0;\r\n  while (true) {\r\n    let hash = Crypto.createHash('SHA256').update(timestamp+data+index+previousHash+nonce).digest('hex');\r\n    if (hash.slice(0,4) === \"0000\") {\r\n      return ([hash, nonce]);\r\n    } else {\r\n      nonce++;\r\n    }\r\n  }\r\n}\r\n\r\nconst createBlock = (data, previousHash, index) => {\r\n  let time = new Date();\r\n  let hashResult = createHash(previousHash, data, index, time)\r\n  return {\r\n    data: data,\r\n    previousHash: previousHash,\r\n    time: time,\r\n    nonce: hashResult[1],\r\n    hash: hashResult[0],\r\n    mined: true}\r\n}\r\n\r\nconst genesisBlock = createBlock('Genesis block', '-1', 0);\r\ngenesisBlock['blockName'] = 'Genesis block';\r\n\r\nclass Chain extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      blockChain: [genesisBlock, ],\r\n      data: ''\r\n    };\r\n  }\r\n\r\n  onMine = (event) => {\r\n    let newBlock = createBlock(this.state.data, this.state.blockChain[this.state.blockChain.length-1].hash, this.state.blockChain.length);\r\n    newBlock['blockName'] = 'Block ' + this.state.blockChain.length;\r\n    let newBlockChain = this.state.blockChain;\r\n    newBlockChain.push(newBlock);\r\n    console.log(newBlockChain);\r\n    this.setState({blockChain: newBlockChain});\r\n    this.setState({data: ''});\r\n  }\r\n\r\n  onDataInputChange = (event) => {\r\n    this.setState({data: event.target.value});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\" style={{ width: 800 }}>\r\n        {\r\n          this.state.blockChain.map((block, i) =>\r\n            <Block\r\n              key={i}\r\n              previousHash={this.state.blockChain[i].previousHash}\r\n              blockName={this.state.blockChain[i].blockName}\r\n              data={this.state.blockChain[i].data}\r\n              time={this.state.blockChain[i].time}\r\n              nonce={this.state.blockChain[i].nonce}\r\n              hash={this.state.blockChain[i].hash}\r\n              mined={this.state.blockChain[i].mined}\r\n            />\r\n          )\r\n        }\r\n        <Block data={''} blockName={'Block ' + this.state.blockChain.length} mine={this.onMine} dataInputChange={this.onDataInputChange}/>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Chain;\r\n","import React, { Component } from 'react';\r\nimport Chain from '../components/chain/Chain';\r\nimport './App.css';\r\n\r\nconst navStyle = {\r\n  boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2)'\r\n};\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <nav className=\"nav justify-content-center bg-white\" style={ navStyle }><h1>Blockchain</h1></nav>\r\n        <Chain/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// import 'material-kit/assets/css/material-kit.css';\r\nimport './assets/css/material-kit.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}